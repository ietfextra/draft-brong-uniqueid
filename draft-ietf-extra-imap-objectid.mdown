%%%
    title = "IMAP Extension for object identifiers"
    abbrev = "IMAP ObjectID"
    category = "std"
    docName = "draft-ietf-extra-imap-objectid-03"
    updates = [3501]
    ipr= "trust200902"
    area = "Applications"
    workgroup = "EXTRA"
    keyword = ["IMAP", "email"]

    date = 2018-05-28T00:00:00Z

    [[author]]
    initials="B."
    surname="Gondwana"
    fullname="Bron Gondwana"
    role="editor"
    organization = "FastMail"
        [author.address]
        email = "brong@fastmailteam.com"
        uri = "https://www.fastmail.com"
        [author.address.postal]
            street = "Level 2, 114 William St"
            city = "Melbourne"
            code = "VIC 3000"
            country = "Australia"
%%%

.# Abstract

This document updates RFC3501 (IMAP4rev1) with persistent identifiers on
mailboxes and messages to allow clients to more efficiently re-use cached
data when resources have changed location on the server.

{mainmatter}

# Introduction

IMAP stores are often used by many clients.  Each client may cache data from
the server so that they don't need to re-download information.
[@!RFC3501] defines that a mailbox can be uniquely referenced by
its name and UIDVALIDITY, and a message within that mailbox can be uniquely
referenced by its mailbox (name + UIDVALIDITY) and UID.  The triple of
mailbox name, UIDVALIDITY and UID is guaranteed to be immutable.

[@!RFC4315] defines a COPYUID response which allows a client which
copies messages to know the mapping between the UIDs in the
source and destination mailboxes, and hence update its local cache.

If a mailbox is successfully renamed, the client knows that the same messages
exist in the destination mailbox name as previously existed in the
source mailbox name.

The result is that the client which copies (or [@!RFC6851] moves) messages or
renames a mailbox can update its local cache, but any other client connected
to the same store can not know with certainty that the messages are identical,
and so will re-download everything.

This extension adds new properties to a message (EMAILID) and mailbox (MAILBOXID)
which allow a client to quickly identify messages or mailboxes which have been
renamed by another client.

This extension also adds an optional thread identifier (THREADID) to messages,
which can be used by the server to indicate messages which it has identified
to be related.

# Conventions Used In This Document


In examples, "C:" indicates lines sent by a client that is connected
to a server. "S:" indicates lines sent by the server to the client.

The key words "**MUST**", "**MUST NOT**", "**REQUIRED**", "**SHALL**",
"**SHALL NOT**", "**SHOULD**", "**SHOULD NOT**", "**RECOMMENDED**",
"**MAY**", and "**OPTIONAL**" in this document are to be interpreted as
described in [@!RFC2119] when they appear in ALL CAPS.  These words may
also appear in this document in lower case as plain English words,
absent their normative meanings.

# CAPABILITY Identification

IMAP servers that support this extension **MUST** include "OBJECTID" in
the response list to the CAPABILITY command.

# MAILBOXID object identifier

The MAILBOXID is a server-allocated unique identifer for each mailbox.

The server **SHOULD** return the same MAILBOXID for a server with the same
mailbox name and UIDVALIDITY.  This is almost MUST, but weakened to allow
for the possibility of loss of OBJECTID data during disaster recovery
while still keeping the name and UIDVALIDITY the same.

The server **MUST NOT** report the same MAILBOXID for two mailboxes at the
same time.

The server **MUST NOT** reuse the same MAILBOXID for a mailbox which does not
obey all the invarients that [@!RFC3501] defines for a mailbox which does
not change name or UIDVALIDITY.

The server **MAY** choose to create a MAILBOXID value in a way that does not
survive RENAME (e.g. a digest of name + uidvalidity could be used),
however the client then loses the major benefit of having an identifier.

## New response code for CREATE

This document extends the CREATE command to have the response code MAILBOXID
on successful mailbox creation.

A server advertising the OBJECTID capability **MUST** include the MAILBOXID
response code in the tagged OK response to all successful CREATE commands.

Syntax: "MAILBOXID" SP "(" &lt;objectid&gt; ")"

    Response code in tagged OK for successful CREATE command.

Example:

```
C: 3 create foo
S: 3 OK [MAILBOXID (F2212ea87-6097-4256-9d51-71338625)] Completed
C: 4 create bar
S: 4 OK [MAILBOXID (F6352ae03-b7f5-463c-896f-d8b48ee3)] Completed
C: 5 create foo
S: 5 NO Mailbox already exists
```

## New OK Untagged Response for SELECT and EXAMINE

This document adds a new untagged response code to the SELECT and
EXAMINE commands.

A server advertising the OBJECTID capability **MUST** return an untagged
OK response with the MAILBOXID response code on all successful SELECT
and EXAMINE commands.

Syntax: "OK" SP "[" "MAILBOXID" SP "(" &lt;objectid&gt; ")" "]" text

    Untagged OK response to SELECT or EXAMINE.

Example:
```
C: 27 select "foo"
[...]
S: * OK [UIDVALIDITY 1524195797] Ok
S: * OK [MAILBOXID (F2212ea87-6097-4256-9d51-71338625)] Ok
[...]
S: 27 OK [READ-WRITE] Completed
```

## New attribute for STATUS

This document adds the MAILBOXID attribute to the STATUS command using
the extended syntax defined in [@!RFC4466].

A server that advertises the OBJECTID capability **MUST** support the
MAILBOXID status attribute.

Syntax: "MAILBOXID"

    The attribute in the STATUS command.

Syntax: "MAILBOXID" SP "(" &lt;objectid&gt; ")"

    The response item in the STATUS response contains the objectid
    assigned by the server for this mailbox.


Example:

```
C: 6 status foo (mailboxid)
S: * STATUS foo (MAILBOXID (F2212ea87-6097-4256-9d51-71338625))
S: 6 OK Completed
C: 7 status bar (mailboxid)
S: * STATUS bar (MAILBOXID (F6352ae03-b7f5-463c-896f-d8b48ee3))
S: 7 OK Completed
C: 8 rename foo renamed
S: * OK rename foo renamed
S: 8 OK Completed
C: 9 status renamed (mailboxid)
S: * STATUS renamed (MAILBOXID (F2212ea87-6097-4256-9d51-71338625))
S: 9 OK Completed
C: 10 status bar (mailboxid)
S: * STATUS bar (MAILBOXID (F6352ae03-b7f5-463c-896f-d8b48ee3))
S: 10 OK Completed
```

When the LIST-STATUS IMAP capability defined in [@!RFC5819] is also
available, the STATUS command can be combined with the LIST command.

Example:

```
C: 11 list "" "*" return (status (mailboxid))
S: * LIST (\HasNoChildren) "." INBOX
S: * STATUS INBOX (MAILBOXID (Ff8e3ead4-9389-4aff-adb1-d8d89efd8cbf))
S: * LIST (\HasNoChildren) "." bar
S: * STATUS bar (MAILBOXID (F6352ae03-b7f5-463c-896f-d8b48ee3))
S: * LIST (\HasNoChildren) "." renamed
S: * STATUS renamed (MAILBOXID (F2212ea87-6097-4256-9d51-71338625))
S: 11 OK Completed (0.001 secs 3 calls)
```

# EMAILID object identifier and THREADID correlator

This document defines the data items EMAILID and THREADID on messages.

## EMAILID identifier for identical messages

The EMAILID data item is an objectid which uniquely identifies the
content of a single message.  Anything which must remain
immutable on a {name, uidvalidity, uid} triple must also be the
same between messages with the same EMAILID.

The server **SHOULD** return the same EMAILID for the same UID triple.  As
with MAILBOXID above, this is almost a MUST, but allows for the possibility
of loss of OBJECTID data in disaster recovery without having to change
UIDVALIDITY.

The server **SHOULD** return the same EMAILID for the exact same message
content in different folders after a COPY or [@RFC6851] MOVE
command.

The server **MAY** assign the same EMAILID as an existing message upon
APPEND if it detects that the new message has exactly identical content
to that existing message.

## THREADID identifer for related messages

The THREADID data item is an objectid which uniquely identifies
a set of messages which the server believes should be grouped
together when presented.

THREADID calculation is generally based on some combination of References,
In-Reply-To and Subject, but the exact logic is left up to the server
implementation.  [@RFC5256] describes some algorithms that MAY be used,
however this specfication does not mandate any particular strategy.

The server **MUST** return the same THREADID for all messages with the
same EMAILID.

The server **SHOULD** return the same THREADID for related messages even
if they are in different mailboxes.

THREADID is optional, if the server is unable to calculate relationships
between messages, it **MUST** return NIL to in all FETCH responses for the
THREADID data item, and a SEARCH for THREADID **MUST NOT** match any messages.

The server **MAY** use the same objectid value for both EMAILID and THREADID,
for example the THREADID could be the EMAILID of the first message that
the server has seen in each thread.


## New Message Data Items in FETCH and UID FETCH Commands

This document defines two FETCH items:

Syntax: EMAILID

    The EMAILID message data item causes the server to return EMAILID
    FETCH response data items.

Syntax: THREADID

    The THREADID message data item causes the server to return THREADID
    FETCH response data items.

And the following responses:

Syntax:  EMAILID ( &lt;objectid&gt; )

    The EMAILID response data item contains the server-assigned objectid
    for each message.

Syntax:  THREADID ( &lt;objectid&gt; )

    The THREADID response data item contains the server-assigned objectid
    for the set of related messages to which this message belongs.

Syntax:  THREADID NIL

    The NIL value to the THREADID response data item is returned when
    the server mailbox does not support THREADID calculation.

Example:

```
C: 5 append inbox "20-Mar-2018 03:07:37 +1100" {733}
[...]
Subject: Message A
Message-ID: <fake.1521475657.54797@example.com>
[...]
S: 5 OK [APPENDUID 1521475658 1] Completed

C: 11 append inbox "20-Mar-2018 03:07:37 +1100" {793}
[...]
Subject: Re: Message A
Message-ID: <fake.1521475657.21213@example.org>
References: <fake.1521475657.54797@example.com>
[...]
S: 11 OK [APPENDUID 1521475658 2] Completed

C: 17 append inbox "20-Mar-2018 03:07:37 +1100" {736}
[...]
Subject: Message C
Message-ID: <fake.1521475657.60280@example.com>
[...]
S: 17 OK [APPENDUID 1521475658 3] Completed

C: 22 fetch 1:* (emailid threadid)
S: * 1 FETCH (EMAILID (M6d99ac3275bb4e) THREADID (T64b478a75b7ea9))
S: * 2 FETCH (EMAILID (M288836c4c7a762) THREADID (T64b478a75b7ea9))
S: * 3 FETCH (EMAILID (M5fdc09b49ea703) THREADID (T11863d02dd95b5))
S: 22 OK Completed (0.000 sec)

C: 23 move 2 foo
S: * OK [COPYUID 1521475659 2 1] Completed
S: * 2 EXPUNGE
S: 23 OK Completed

C: 24 fetch 1:* (emailid threadid)
S: * 1 FETCH (EMAILID (M6d99ac3275bb4e) THREADID (T64b478a75b7ea9))
S: * 2 FETCH (EMAILID (M5fdc09b49ea703) THREADID (T11863d02dd95b5))
S: 24 OK Completed (0.000 sec)
C: 25 select "foo"

C: 25 select "foo"
[...]
S: 25 OK [READ-WRITE] Completed
C: 26 fetch 1:* (emailid threadid)
S: * 1 FETCH (EMAILID (M288836c4c7a762) THREADID (T64b478a75b7ea9))
S: 26 OK Completed (0.000 sec)
```

Example: (no THREADID support)
```
C: 26 fetch 1:* (emailid threadid)
S: * 1 FETCH (EMAILID (M00000001) THREADID NIL)
S: * 2 FETCH (EMAILID (M00000002) THREADID NIL)
S: 26 OK Completed (0.000 sec)

```

# New Filters on SEARCH command

This document defines filters EMAILID and THREADID on the SEARCH command.

EMAILID &lt;objectid&gt;

    Messages whose EMAILID is exactly the specified objectid.

THREADID &lt;objectid&gt;

    Messages whose THREADID is exactly the specified objectid.

Example: (as if run before the MOVE above when the mailbox had 3 messages)

```
C: 27 search emailid M6d99ac3275bb4e
S: * SEARCH 1
S: 27 OK Completed (1 msgs in 0.000 secs)
C: 28 search threadid T64b478a75b7ea9
S: * SEARCH 1 2
S: 28 OK Completed (2 msgs in 0.000 secs)
```


# Formal syntax

The following syntax specification uses the Augmented Backus-Naur
Form (ABNF) [@!RFC5234] notation.  Elements not defined here can be found
in the formal syntax of the ABNF [@!RFC5234], IMAP [@!RFC3501], and IMAP
ABNF extensions [@!RFC4466] specifications.

Except as noted otherwise, all alphabetic characters are case-
insensitive.  The use of upper- or lowercase characters to define
token strings is for editorial clarity only.  Implementations MUST
accept these strings in a case-insensitive fashion.

capability =/ "OBJECTID"

fetch-att =/ "EMAILID" / "THREADID"

fetch-emailid-resp = "EMAILID" SP "(" objectid ")"
        ; follows tagged-ext production from [@!RFC4466]

fetch-threadid-resp = "THREADID" SP "(" objectid ")" /
                      "THREADID NIL
        ; follows tagged-ext production from [@!RFC4466]

objectid = 1*255(ALPHA / DIGIT / "_" / "-")
        ; characters in object identifiers are case
        ; significant

resp-text-code =/ "MAILBOXID" SP "(" objectid ")"
        ; incorporated before the expansion rule of
        ;  atom [SP 1*&lt;any TEXT-CHAR except "]"&gt;]
        ; that appears in [@!RFC3501]

search-key =/ "EMAILID" SP objectid / "THREADID" SP objectid

status-att =/ "MAILBOXID"

status-att-value =/ "MAILBOXID" SP "(" objectid ")"
        ; follows tagged-ext production from [@!RFC4466]


# Implementation considerations

## Assigning object identifiers

All objectid values are allocated by the server.

In the interests of reducing the possibilities of encoding mistakes, objectids
are restricted to a safe subset of possible byte values, and in order to allow
clients to allocate storage, they are restricted in length.

An objectid is a string of 1 to 255 characters from the following set of
64 codepoints. a-z, A-Z, 0-9, '_', '-'.  These characters are safe to use
in almost any context (e.g. filesystems, URIs, IMAP atoms).

For maximum safety, servers SHOULD also follow defensive allocation strategies
to avoid creating risks where glob completion or data type detection may be
present (e.g. on filesystems or in spreadsheets).  In particular it is wise to
avoid:

* ids starting with -
* ids starting with digits
* ids which contain only digits
* ids which differ only by ASCII case (A vs a)
* the specific sequence of 3 characters NIL

A good solution to these issues is to prefix every ID with a single
alphabetical character.

## Interaction with special cases

The case of RENAME INBOX may need special handling for unique ids.

It is advisable (though not required) to have MAILBOXID be globally
unique, but it is only required to be unique within messages offered
to a single client login to a single server hostname.  For example,
a proxy which aggregates multiple independent servers **MUST NOT**
advertise the OBJECTID capability unless it can guarantee that
the backends will not use the same identifiers for different objects.

## Client usage

Servers that implement both RFC 6154 and this specification SHOULD
optimize their execution of command like UID SEARCH OR EMAILID 1234 EMAILID
4321.

Clients can assume that searching the all-mail mailbox using
OR/EMAILID or OR/THREADID is a fast way to find messages again if some
other client has moved them out of the mailbox where they were previously
seen.

Clients that cache data offline SHOULD fetch the EMAILID of all new
messages to avoid re-downloading already cached message details.

Clients SHOULD fetch the MAILBOXID for any new mailboxes before
discarding cache data for any mailbox which is no longer present
on the server, so that they can detect renames and avoid re-downloading
data.

# Future considerations

This extension is intentionally defined to be compatible with the data
model in [@I-D.ietf-jmap-mail].

A future extension could be proposed to give a way to SELECT a mailbox
by MAILBOXID rather than name.

An extension to allow fetching message content directly via EMAILID and
message listings by THREADID could be proposed.

# IANA Considerations

IANA is requested to add "OBJECTID" to the "IMAP Capabilities"
registry located at <http://www.iana.org/assignments/imap-capabilities>.

IANA is requested to add "MAILBOXID" to the "IMAP Response Codes"
registry located at <https://www.iana.org/assignments/imap-response-codes>
with a Reference of [[THIS RFC]].

# Security Considerations

It is strongly advised that servers generate OBJECTIDs which are safe to
use as filesystem names, and unlikely to be auto-detected as numbers.  See
implementation considerations.

If a digest is used for ID generation, it must have a collision resistent
property, so server implementations are advised to monitor current security
research and choose secure digests.

The use of a digest for ID generation may be used as proof that a particular
sequence of bytes was seen by the server.

# Changes

To be removed by the editor before publication

## draft-ietf-extra-imap-objectid-03

* added RFC3501 to Abstract
* updated [[THIS RFC]] to not fail idnits
* changed jmap-mail to be informative rather than normative

## draft-ietf-extra-imap-objectid-02

* added "Client usage" section

## draft-ietf-extra-imap-objectid-01

* added "updates" for RFC3501
* fixed domains in thread example
* described threading in more detail
* added IANA request for Response Code
* clarified RFC2119 references
* simplified some waffle in wording
* added security consideration to choose good digest
* added MAILBOXID-UID suggestion for EMAILID generation
* updated ABNF normative reference to RFC5234

## draft-ietf-extra-imap-objectid-00

* renamed draft to be objectid rather than uniqueid
* renamed UNIQUEID (capability) to OBJECTID
* restricted objectid to 64 safe characters
* added security considerations and advice about choosing objectid
* wrapped all responses in () for RFC4466 compatibility
* signifiant rewrite of all sections

## draft-ietf-extra-imap-uniqueid-00

* renamed draft to be an EXTRA document
* added example for LIST RETURN STATUS
* started work on ABNF
* attempted to add response codes for EMAILID and THREADID

## draft-gondwana-imap-uniqueid-01

* renamed UNIQUEID (status item) to MAILBOXID
* renamed MSGID to EMAILID
* renamed THRID to THREADID
* added TODO section

## draft-gondwana-imap-uniqueid-00

* initial upload with names UNIQUEID/MSGID/THRID

# Acknowledgments

The EXTRA working group at IETF.  In particular feedback from
Arnt Gulbrandsen, Brandon Long, Chris Newman and Josef Sipek.

The Gmail X-GM-THRID and X-GM-MSGID implementation as currently defined
at <https://developers.google.com/gmail/imap/imap-extensions>.

Dovecot X-GUID implementation.

## Appendix 1: ideas for implementing object identifiers

Ideas for implementing MAILBOXID:

* Digest of (MailboxName/UIDVALIDITY) - not kept when renaming,
  but is guaranteed unique and doesn't require storage.
* [@RFC4122] UUID
* Server assigned sequence number (guaranteed not to be reused)

Ideas for implementing EMAILID:

* Digest of (MailboxName/UIDVALIDITY/UID) - is not kept when copying
  messages, but is guaranteed unique and doesn't require storage.
* Concatenation of MAILBOXID-UID - for servers which store MAILBOXID
  but not EMAILID.
* Digest of message content (RFC822 bytes) - expensive unless cached
* [@RFC4122] UUID
* Server assigned sequence number (guaranteed not to be reused)

Ideas for implementing THREADID:

* Derive from EMAILID of first seen message in the thread.
* [@RFC4122] UUID
* Server assigned sequence number (guaranteed not to be reused)

There is a need to index and look up reference/in-reply-to data
at message creation to efficiently find matching messages
for threading.  Threading may be either across folders, or within
each folder only.  The server has significant leeway here.

{backmatter}
